{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import dependencies and setup\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import scipy.stats as st\n",
    "from scipy.stats import linregress\n",
    "import numpy as np "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>2020-01</th>\n",
       "      <th>2020-02</th>\n",
       "      <th>2020-03</th>\n",
       "      <th>2020-04</th>\n",
       "      <th>2020-05</th>\n",
       "      <th>2020-06</th>\n",
       "      <th>2020-07</th>\n",
       "      <th>2020-08</th>\n",
       "      <th>2020-09</th>\n",
       "      <th>2020-10</th>\n",
       "      <th>2020-11</th>\n",
       "      <th>2020-12</th>\n",
       "      <th>2021-01</th>\n",
       "      <th>2021-02</th>\n",
       "      <th>2021-03</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FIPS Code</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>01001</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>148.0</td>\n",
       "      <td>326.0</td>\n",
       "      <td>485.0</td>\n",
       "      <td>386.0</td>\n",
       "      <td>331.0</td>\n",
       "      <td>391.0</td>\n",
       "      <td>733.0</td>\n",
       "      <td>1383.0</td>\n",
       "      <td>1536.0</td>\n",
       "      <td>578.0</td>\n",
       "      <td>210.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>01003</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>131.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>428.0</td>\n",
       "      <td>2073.0</td>\n",
       "      <td>1370.0</td>\n",
       "      <td>1340.0</td>\n",
       "      <td>937.0</td>\n",
       "      <td>2060.0</td>\n",
       "      <td>3994.0</td>\n",
       "      <td>4489.0</td>\n",
       "      <td>1516.0</td>\n",
       "      <td>417.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>01005</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>146.0</td>\n",
       "      <td>228.0</td>\n",
       "      <td>144.0</td>\n",
       "      <td>147.0</td>\n",
       "      <td>155.0</td>\n",
       "      <td>117.0</td>\n",
       "      <td>258.0</td>\n",
       "      <td>418.0</td>\n",
       "      <td>159.0</td>\n",
       "      <td>68.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>01007</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>97.0</td>\n",
       "      <td>190.0</td>\n",
       "      <td>173.0</td>\n",
       "      <td>114.0</td>\n",
       "      <td>203.0</td>\n",
       "      <td>340.0</td>\n",
       "      <td>563.0</td>\n",
       "      <td>473.0</td>\n",
       "      <td>123.0</td>\n",
       "      <td>53.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>01009</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>144.0</td>\n",
       "      <td>555.0</td>\n",
       "      <td>538.0</td>\n",
       "      <td>297.0</td>\n",
       "      <td>510.0</td>\n",
       "      <td>1083.0</td>\n",
       "      <td>1552.0</td>\n",
       "      <td>993.0</td>\n",
       "      <td>328.0</td>\n",
       "      <td>267.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56039</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56041</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56043</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56045</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NA</th>\n",
       "      <td>2088.0</td>\n",
       "      <td>1800.0</td>\n",
       "      <td>20080.0</td>\n",
       "      <td>47847.0</td>\n",
       "      <td>55253.0</td>\n",
       "      <td>63919.0</td>\n",
       "      <td>111954.0</td>\n",
       "      <td>84834.0</td>\n",
       "      <td>128778.0</td>\n",
       "      <td>178445.0</td>\n",
       "      <td>286222.0</td>\n",
       "      <td>347651.0</td>\n",
       "      <td>218961.0</td>\n",
       "      <td>153776.0</td>\n",
       "      <td>59089.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3143 rows Ã— 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           2020-01  2020-02  2020-03  2020-04  2020-05  2020-06   2020-07  \\\n",
       "FIPS Code                                                                   \n",
       "01001          0.0      0.0     14.0     38.0    148.0    326.0     485.0   \n",
       "01003          0.0      0.0     62.0    131.0     72.0    428.0    2073.0   \n",
       "01005          0.0      0.0      0.0     40.0     91.0    146.0     228.0   \n",
       "01007          0.0      0.0      0.0     35.0     29.0     97.0     190.0   \n",
       "01009          0.0      0.0     13.0     32.0     15.0    144.0     555.0   \n",
       "...            ...      ...      ...      ...      ...      ...       ...   \n",
       "56039          0.0      0.0      0.0      0.0      0.0      0.0       0.0   \n",
       "56041          0.0      0.0      0.0      0.0      0.0      0.0       0.0   \n",
       "56043          0.0      0.0      0.0      0.0      0.0      0.0       0.0   \n",
       "56045          0.0      0.0      0.0      0.0      0.0      0.0       0.0   \n",
       "NA          2088.0   1800.0  20080.0  47847.0  55253.0  63919.0  111954.0   \n",
       "\n",
       "           2020-08   2020-09   2020-10   2020-11   2020-12   2021-01  \\\n",
       "FIPS Code                                                              \n",
       "01001        386.0     331.0     391.0     733.0    1383.0    1536.0   \n",
       "01003       1370.0    1340.0     937.0    2060.0    3994.0    4489.0   \n",
       "01005        144.0     147.0     155.0     117.0     258.0     418.0   \n",
       "01007        173.0     114.0     203.0     340.0     563.0     473.0   \n",
       "01009        538.0     297.0     510.0    1083.0    1552.0     993.0   \n",
       "...            ...       ...       ...       ...       ...       ...   \n",
       "56039          0.0       0.0       0.0       0.0       0.0       0.0   \n",
       "56041          0.0       0.0       0.0       0.0       0.0       0.0   \n",
       "56043          0.0       0.0       0.0       0.0       0.0       0.0   \n",
       "56045          0.0       0.0       0.0       0.0       0.0       0.0   \n",
       "NA         84834.0  128778.0  178445.0  286222.0  347651.0  218961.0   \n",
       "\n",
       "            2021-02  2021-03  \n",
       "FIPS Code                     \n",
       "01001         578.0    210.0  \n",
       "01003        1516.0    417.0  \n",
       "01005         159.0     68.0  \n",
       "01007         123.0     53.0  \n",
       "01009         328.0    267.0  \n",
       "...             ...      ...  \n",
       "56039           0.0      0.0  \n",
       "56041           0.0      0.0  \n",
       "56043           0.0      0.0  \n",
       "56045           0.0      0.0  \n",
       "NA         153776.0  59089.0  \n",
       "\n",
       "[3143 rows x 15 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "patients_df = pd.read_csv('analysis_data/patients.csv', dtype={'FIPS Code':str})\n",
    "patients_df.iloc[-1,0] = 'NA'\n",
    "patients_df.set_index('FIPS Code', drop=True, inplace=True)\n",
    "patients_df = patients_df.drop('2021-04', axis = 1)\n",
    "patients_df "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "icu_df = pd.read_csv('analysis_data/icu.csv',dtype={'FIPS Code':str})\n",
    "icu_df.iloc[-1,0] = 'NA'\n",
    "icu_df.set_index('FIPS Code', drop=True, inplace=True)\n",
    "icu_df  = icu_df.drop('2021-04', axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>STNAME</th>\n",
       "      <th>CTYNAME</th>\n",
       "      <th>POPESTIMATE2019</th>\n",
       "      <th>TOT_MALE</th>\n",
       "      <th>TOT_FEMALE</th>\n",
       "      <th>0 - 17 years</th>\n",
       "      <th>18 - 49 years</th>\n",
       "      <th>50 - 64 years</th>\n",
       "      <th>65 + years</th>\n",
       "      <th>Percent Hispanic</th>\n",
       "      <th>Percent non-Hispanic American Indian/Alaska Native</th>\n",
       "      <th>Percent non-Hispanic Asian</th>\n",
       "      <th>Percent non-Hispanic Black</th>\n",
       "      <th>Percent non-Hispanic Native Hawaiian/Pacific Islander</th>\n",
       "      <th>Percent non-Hispanic White</th>\n",
       "      <th>Percent non-Hispanic Other</th>\n",
       "      <th>Lat</th>\n",
       "      <th>Lng</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FIPS Code</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>01001</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Autauga County</td>\n",
       "      <td>55869</td>\n",
       "      <td>27092</td>\n",
       "      <td>28777</td>\n",
       "      <td>14252</td>\n",
       "      <td>21652</td>\n",
       "      <td>11041</td>\n",
       "      <td>8924</td>\n",
       "      <td>0.0283</td>\n",
       "      <td>0.0025</td>\n",
       "      <td>0.0103</td>\n",
       "      <td>0.1900</td>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.7460</td>\n",
       "      <td>0.6548</td>\n",
       "      <td>32.562500</td>\n",
       "      <td>-86.547800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>01003</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Baldwin County</td>\n",
       "      <td>223234</td>\n",
       "      <td>108247</td>\n",
       "      <td>114987</td>\n",
       "      <td>52268</td>\n",
       "      <td>77402</td>\n",
       "      <td>46734</td>\n",
       "      <td>46830</td>\n",
       "      <td>0.0456</td>\n",
       "      <td>0.0065</td>\n",
       "      <td>0.0092</td>\n",
       "      <td>0.0917</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.8307</td>\n",
       "      <td>0.6710</td>\n",
       "      <td>30.554945</td>\n",
       "      <td>-87.723960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>01005</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Barbour County</td>\n",
       "      <td>24686</td>\n",
       "      <td>13064</td>\n",
       "      <td>11622</td>\n",
       "      <td>5595</td>\n",
       "      <td>9477</td>\n",
       "      <td>4753</td>\n",
       "      <td>4861</td>\n",
       "      <td>0.0436</td>\n",
       "      <td>0.0029</td>\n",
       "      <td>0.0048</td>\n",
       "      <td>0.4744</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.4581</td>\n",
       "      <td>0.3463</td>\n",
       "      <td>31.787050</td>\n",
       "      <td>-85.429850</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>01007</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Bibb County</td>\n",
       "      <td>22394</td>\n",
       "      <td>11929</td>\n",
       "      <td>10465</td>\n",
       "      <td>4992</td>\n",
       "      <td>9233</td>\n",
       "      <td>4436</td>\n",
       "      <td>3733</td>\n",
       "      <td>0.0257</td>\n",
       "      <td>0.0013</td>\n",
       "      <td>0.0012</td>\n",
       "      <td>0.2214</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.7453</td>\n",
       "      <td>0.6354</td>\n",
       "      <td>33.059925</td>\n",
       "      <td>-87.145725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>01009</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Blount County</td>\n",
       "      <td>57826</td>\n",
       "      <td>28472</td>\n",
       "      <td>29354</td>\n",
       "      <td>14522</td>\n",
       "      <td>21002</td>\n",
       "      <td>11488</td>\n",
       "      <td>10814</td>\n",
       "      <td>0.0926</td>\n",
       "      <td>0.0007</td>\n",
       "      <td>0.0037</td>\n",
       "      <td>0.0153</td>\n",
       "      <td>0.0004</td>\n",
       "      <td>0.8689</td>\n",
       "      <td>0.7923</td>\n",
       "      <td>33.957085</td>\n",
       "      <td>-86.576808</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56037</th>\n",
       "      <td>Wyoming</td>\n",
       "      <td>Sweetwater County</td>\n",
       "      <td>42343</td>\n",
       "      <td>21808</td>\n",
       "      <td>20535</td>\n",
       "      <td>12049</td>\n",
       "      <td>16959</td>\n",
       "      <td>7846</td>\n",
       "      <td>5489</td>\n",
       "      <td>0.1588</td>\n",
       "      <td>0.0102</td>\n",
       "      <td>0.0074</td>\n",
       "      <td>0.0112</td>\n",
       "      <td>0.0003</td>\n",
       "      <td>0.7956</td>\n",
       "      <td>0.5841</td>\n",
       "      <td>41.670024</td>\n",
       "      <td>-109.198271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56039</th>\n",
       "      <td>Wyoming</td>\n",
       "      <td>Teton County</td>\n",
       "      <td>23464</td>\n",
       "      <td>12142</td>\n",
       "      <td>11322</td>\n",
       "      <td>4586</td>\n",
       "      <td>10694</td>\n",
       "      <td>4467</td>\n",
       "      <td>3717</td>\n",
       "      <td>0.1503</td>\n",
       "      <td>0.0033</td>\n",
       "      <td>0.0125</td>\n",
       "      <td>0.0124</td>\n",
       "      <td>0.0012</td>\n",
       "      <td>0.8134</td>\n",
       "      <td>0.5153</td>\n",
       "      <td>43.515844</td>\n",
       "      <td>-110.815633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56041</th>\n",
       "      <td>Wyoming</td>\n",
       "      <td>Uinta County</td>\n",
       "      <td>20226</td>\n",
       "      <td>10224</td>\n",
       "      <td>10002</td>\n",
       "      <td>6215</td>\n",
       "      <td>7229</td>\n",
       "      <td>3757</td>\n",
       "      <td>3025</td>\n",
       "      <td>0.0913</td>\n",
       "      <td>0.0065</td>\n",
       "      <td>0.0016</td>\n",
       "      <td>0.0011</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.8752</td>\n",
       "      <td>0.6935</td>\n",
       "      <td>41.293529</td>\n",
       "      <td>-110.539357</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56043</th>\n",
       "      <td>Wyoming</td>\n",
       "      <td>Washakie County</td>\n",
       "      <td>7805</td>\n",
       "      <td>3963</td>\n",
       "      <td>3842</td>\n",
       "      <td>1960</td>\n",
       "      <td>2506</td>\n",
       "      <td>1609</td>\n",
       "      <td>1730</td>\n",
       "      <td>0.1423</td>\n",
       "      <td>0.0052</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0004</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.8190</td>\n",
       "      <td>0.5881</td>\n",
       "      <td>44.018750</td>\n",
       "      <td>-107.701300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56045</th>\n",
       "      <td>Wyoming</td>\n",
       "      <td>Weston County</td>\n",
       "      <td>6927</td>\n",
       "      <td>3624</td>\n",
       "      <td>3303</td>\n",
       "      <td>1529</td>\n",
       "      <td>2362</td>\n",
       "      <td>1558</td>\n",
       "      <td>1478</td>\n",
       "      <td>0.0108</td>\n",
       "      <td>0.0017</td>\n",
       "      <td>0.0077</td>\n",
       "      <td>0.0023</td>\n",
       "      <td>0.0011</td>\n",
       "      <td>0.9637</td>\n",
       "      <td>0.7604</td>\n",
       "      <td>43.938550</td>\n",
       "      <td>-104.357075</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3142 rows Ã— 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            STNAME            CTYNAME  POPESTIMATE2019  TOT_MALE  TOT_FEMALE  \\\n",
       "FIPS Code                                                                      \n",
       "01001      Alabama     Autauga County            55869     27092       28777   \n",
       "01003      Alabama     Baldwin County           223234    108247      114987   \n",
       "01005      Alabama     Barbour County            24686     13064       11622   \n",
       "01007      Alabama        Bibb County            22394     11929       10465   \n",
       "01009      Alabama      Blount County            57826     28472       29354   \n",
       "...            ...                ...              ...       ...         ...   \n",
       "56037      Wyoming  Sweetwater County            42343     21808       20535   \n",
       "56039      Wyoming       Teton County            23464     12142       11322   \n",
       "56041      Wyoming       Uinta County            20226     10224       10002   \n",
       "56043      Wyoming    Washakie County             7805      3963        3842   \n",
       "56045      Wyoming      Weston County             6927      3624        3303   \n",
       "\n",
       "           0 - 17 years  18 - 49 years  50 - 64 years  65 + years  \\\n",
       "FIPS Code                                                           \n",
       "01001             14252          21652          11041        8924   \n",
       "01003             52268          77402          46734       46830   \n",
       "01005              5595           9477           4753        4861   \n",
       "01007              4992           9233           4436        3733   \n",
       "01009             14522          21002          11488       10814   \n",
       "...                 ...            ...            ...         ...   \n",
       "56037             12049          16959           7846        5489   \n",
       "56039              4586          10694           4467        3717   \n",
       "56041              6215           7229           3757        3025   \n",
       "56043              1960           2506           1609        1730   \n",
       "56045              1529           2362           1558        1478   \n",
       "\n",
       "           Percent Hispanic  \\\n",
       "FIPS Code                     \n",
       "01001                0.0283   \n",
       "01003                0.0456   \n",
       "01005                0.0436   \n",
       "01007                0.0257   \n",
       "01009                0.0926   \n",
       "...                     ...   \n",
       "56037                0.1588   \n",
       "56039                0.1503   \n",
       "56041                0.0913   \n",
       "56043                0.1423   \n",
       "56045                0.0108   \n",
       "\n",
       "           Percent non-Hispanic American Indian/Alaska Native  \\\n",
       "FIPS Code                                                       \n",
       "01001                                                 0.0025    \n",
       "01003                                                 0.0065    \n",
       "01005                                                 0.0029    \n",
       "01007                                                 0.0013    \n",
       "01009                                                 0.0007    \n",
       "...                                                      ...    \n",
       "56037                                                 0.0102    \n",
       "56039                                                 0.0033    \n",
       "56041                                                 0.0065    \n",
       "56043                                                 0.0052    \n",
       "56045                                                 0.0017    \n",
       "\n",
       "           Percent non-Hispanic Asian  Percent non-Hispanic Black  \\\n",
       "FIPS Code                                                           \n",
       "01001                          0.0103                      0.1900   \n",
       "01003                          0.0092                      0.0917   \n",
       "01005                          0.0048                      0.4744   \n",
       "01007                          0.0012                      0.2214   \n",
       "01009                          0.0037                      0.0153   \n",
       "...                               ...                         ...   \n",
       "56037                          0.0074                      0.0112   \n",
       "56039                          0.0125                      0.0124   \n",
       "56041                          0.0016                      0.0011   \n",
       "56043                          0.0000                      0.0004   \n",
       "56045                          0.0077                      0.0023   \n",
       "\n",
       "           Percent non-Hispanic Native Hawaiian/Pacific Islander  \\\n",
       "FIPS Code                                                          \n",
       "01001                                                 0.0001       \n",
       "01003                                                 0.0000       \n",
       "01005                                                 0.0000       \n",
       "01007                                                 0.0000       \n",
       "01009                                                 0.0004       \n",
       "...                                                      ...       \n",
       "56037                                                 0.0003       \n",
       "56039                                                 0.0012       \n",
       "56041                                                 0.0000       \n",
       "56043                                                 0.0000       \n",
       "56045                                                 0.0011       \n",
       "\n",
       "           Percent non-Hispanic White  Percent non-Hispanic Other        Lat  \\\n",
       "FIPS Code                                                                      \n",
       "01001                          0.7460                      0.6548  32.562500   \n",
       "01003                          0.8307                      0.6710  30.554945   \n",
       "01005                          0.4581                      0.3463  31.787050   \n",
       "01007                          0.7453                      0.6354  33.059925   \n",
       "01009                          0.8689                      0.7923  33.957085   \n",
       "...                               ...                         ...        ...   \n",
       "56037                          0.7956                      0.5841  41.670024   \n",
       "56039                          0.8134                      0.5153  43.515844   \n",
       "56041                          0.8752                      0.6935  41.293529   \n",
       "56043                          0.8190                      0.5881  44.018750   \n",
       "56045                          0.9637                      0.7604  43.938550   \n",
       "\n",
       "                  Lng  \n",
       "FIPS Code              \n",
       "01001      -86.547800  \n",
       "01003      -87.723960  \n",
       "01005      -85.429850  \n",
       "01007      -87.145725  \n",
       "01009      -86.576808  \n",
       "...               ...  \n",
       "56037     -109.198271  \n",
       "56039     -110.815633  \n",
       "56041     -110.539357  \n",
       "56043     -107.701300  \n",
       "56045     -104.357075  \n",
       "\n",
       "[3142 rows x 18 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "census_data = pd.read_csv('analysis_data/census_2019.csv',dtype={'FIPS Code':str})\n",
    "census_data.set_index('FIPS Code', drop=True, inplace=True)\n",
    "census_data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "death_df = pd.read_csv('analysis_data/death.csv',dtype={'FIPS Code':str})\n",
    "death_df.iloc[-1,0] = 'NA'\n",
    "death_df.set_index('FIPS Code', drop=True, inplace=True)\n",
    "death_df  = death_df.drop('2021-04', axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Patients</th>\n",
       "      <th>Hospitalized</th>\n",
       "      <th>ICU</th>\n",
       "      <th>Death</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FIPS Code</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>01001</th>\n",
       "      <td>6622.0</td>\n",
       "      <td>148.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>01003</th>\n",
       "      <td>19052.0</td>\n",
       "      <td>280.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>119.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>01005</th>\n",
       "      <td>2001.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>01007</th>\n",
       "      <td>2408.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>01009</th>\n",
       "      <td>6376.0</td>\n",
       "      <td>87.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56039</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56041</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56043</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56045</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NA</th>\n",
       "      <td>1788654.0</td>\n",
       "      <td>59949.0</td>\n",
       "      <td>6205.0</td>\n",
       "      <td>19529.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3143 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Patients  Hospitalized     ICU    Death\n",
       "FIPS Code                                          \n",
       "01001         6622.0         148.0     0.0      0.0\n",
       "01003        19052.0         280.0     0.0    119.0\n",
       "01005         2001.0          62.0     0.0      0.0\n",
       "01007         2408.0          62.0     0.0      0.0\n",
       "01009         6376.0          87.0     0.0     11.0\n",
       "...              ...           ...     ...      ...\n",
       "56039            0.0           0.0     0.0      0.0\n",
       "56041            0.0           0.0     0.0      0.0\n",
       "56043            0.0           0.0     0.0      0.0\n",
       "56045            0.0           0.0     0.0      0.0\n",
       "NA         1788654.0       59949.0  6205.0  19529.0\n",
       "\n",
       "[3143 rows x 4 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_abs = pd.read_csv('analysis_data/total_abs.csv',dtype={'FIPS Code':str})\n",
    "total_abs.iloc[-1,0] = 'NA'\n",
    "total_abs.set_index('FIPS Code', drop=True, inplace=True)\n",
    "total_abs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Social Vulnerability Index (SVI)</th>\n",
       "      <th>SVI Category</th>\n",
       "      <th>Percent adults fully vaccinated against COVID-19</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FIPS Code</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1001</th>\n",
       "      <td>0.44</td>\n",
       "      <td>Moderate Concern</td>\n",
       "      <td>0.114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1003</th>\n",
       "      <td>0.22</td>\n",
       "      <td>Low Concern</td>\n",
       "      <td>0.176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1005</th>\n",
       "      <td>1.00</td>\n",
       "      <td>Very High Concern</td>\n",
       "      <td>0.128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1007</th>\n",
       "      <td>0.60</td>\n",
       "      <td>High Concern</td>\n",
       "      <td>0.115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1009</th>\n",
       "      <td>0.42</td>\n",
       "      <td>Moderate Concern</td>\n",
       "      <td>0.095</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56037</th>\n",
       "      <td>0.37</td>\n",
       "      <td>Low Concern</td>\n",
       "      <td>0.228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56039</th>\n",
       "      <td>0.11</td>\n",
       "      <td>Very Low Concern</td>\n",
       "      <td>0.305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56041</th>\n",
       "      <td>0.45</td>\n",
       "      <td>Moderate Concern</td>\n",
       "      <td>0.206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56043</th>\n",
       "      <td>0.37</td>\n",
       "      <td>Low Concern</td>\n",
       "      <td>0.264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56045</th>\n",
       "      <td>0.35</td>\n",
       "      <td>Low Concern</td>\n",
       "      <td>0.216</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3142 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Social Vulnerability Index (SVI)       SVI Category  \\\n",
       "FIPS Code                                                        \n",
       "1001                                   0.44   Moderate Concern   \n",
       "1003                                   0.22        Low Concern   \n",
       "1005                                   1.00  Very High Concern   \n",
       "1007                                   0.60       High Concern   \n",
       "1009                                   0.42   Moderate Concern   \n",
       "...                                     ...                ...   \n",
       "56037                                  0.37        Low Concern   \n",
       "56039                                  0.11   Very Low Concern   \n",
       "56041                                  0.45   Moderate Concern   \n",
       "56043                                  0.37        Low Concern   \n",
       "56045                                  0.35        Low Concern   \n",
       "\n",
       "           Percent adults fully vaccinated against COVID-19  \n",
       "FIPS Code                                                    \n",
       "1001                                                  0.114  \n",
       "1003                                                  0.176  \n",
       "1005                                                  0.128  \n",
       "1007                                                  0.115  \n",
       "1009                                                  0.095  \n",
       "...                                                     ...  \n",
       "56037                                                 0.228  \n",
       "56039                                                 0.305  \n",
       "56041                                                 0.206  \n",
       "56043                                                 0.264  \n",
       "56045                                                 0.216  \n",
       "\n",
       "[3142 rows x 3 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vaccination_df = pd.read_csv('analysis_data/vaccination_data.csv',dtype={'FIPS Code':str})\n",
    "vaccination_df.set_index('FIPS Code', drop=True, inplace=True)\n",
    "vaccination_df = vaccination_df[[\"Social Vulnerability Index (SVI)\",\"SVI Category\",\"Percent adults fully vaccinated against COVID-19\"]]\n",
    "vaccination_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Patients</th>\n",
       "      <th>Hospitalized</th>\n",
       "      <th>ICU</th>\n",
       "      <th>Death</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FIPS Code</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>01001</th>\n",
       "      <td>0.118527</td>\n",
       "      <td>0.002649</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>01003</th>\n",
       "      <td>0.085345</td>\n",
       "      <td>0.001254</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000533</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>01005</th>\n",
       "      <td>0.081058</td>\n",
       "      <td>0.002512</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>01007</th>\n",
       "      <td>0.107529</td>\n",
       "      <td>0.002769</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>01009</th>\n",
       "      <td>0.110262</td>\n",
       "      <td>0.001505</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56037</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56039</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56041</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56043</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56045</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3142 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Patients  Hospitalized  ICU     Death\n",
       "FIPS Code                                       \n",
       "01001      0.118527      0.002649  0.0  0.000000\n",
       "01003      0.085345      0.001254  0.0  0.000533\n",
       "01005      0.081058      0.002512  0.0  0.000000\n",
       "01007      0.107529      0.002769  0.0  0.000000\n",
       "01009      0.110262      0.001505  0.0  0.000190\n",
       "...             ...           ...  ...       ...\n",
       "56037      0.000000      0.000000  0.0  0.000000\n",
       "56039      0.000000      0.000000  0.0  0.000000\n",
       "56041      0.000000      0.000000  0.0  0.000000\n",
       "56043      0.000000      0.000000  0.0  0.000000\n",
       "56045      0.000000      0.000000  0.0  0.000000\n",
       "\n",
       "[3142 rows x 4 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tot_rel = pd.DataFrame((total_abs.iloc[0:-1,:][\"Patients\"]/census_data[\"POPESTIMATE2019\"]), columns = [\"Patients\"])\n",
    "tot_rel[\"Hospitalized\"] = (total_abs.iloc[0:-1,:][\"Hospitalized\"]/census_data[\"POPESTIMATE2019\"])\n",
    "tot_rel[\"ICU\"]= (total_abs.iloc[0:-1,:][\"ICU\"]/census_data[\"POPESTIMATE2019\"])\n",
    "tot_rel[\"Death\"]= (total_abs.iloc[0:-1,:][\"Death\"]/census_data[\"POPESTIMATE2019\"])\n",
    "tot_rel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Patients</th>\n",
       "      <th>Hospitalized</th>\n",
       "      <th>ICU</th>\n",
       "      <th>Death</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FIPS Code</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>01001</th>\n",
       "      <td>6622.0</td>\n",
       "      <td>148.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>01003</th>\n",
       "      <td>19052.0</td>\n",
       "      <td>280.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>119.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>01005</th>\n",
       "      <td>2001.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>01007</th>\n",
       "      <td>2408.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>01009</th>\n",
       "      <td>6376.0</td>\n",
       "      <td>87.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56039</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56041</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56043</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56045</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NA</th>\n",
       "      <td>1788654.0</td>\n",
       "      <td>59949.0</td>\n",
       "      <td>6205.0</td>\n",
       "      <td>19529.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3143 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Patients  Hospitalized     ICU    Death\n",
       "FIPS Code                                          \n",
       "01001         6622.0         148.0     0.0      0.0\n",
       "01003        19052.0         280.0     0.0    119.0\n",
       "01005         2001.0          62.0     0.0      0.0\n",
       "01007         2408.0          62.0     0.0      0.0\n",
       "01009         6376.0          87.0     0.0     11.0\n",
       "...              ...           ...     ...      ...\n",
       "56039            0.0           0.0     0.0      0.0\n",
       "56041            0.0           0.0     0.0      0.0\n",
       "56043            0.0           0.0     0.0      0.0\n",
       "56045            0.0           0.0     0.0      0.0\n",
       "NA         1788654.0       59949.0  6205.0  19529.0\n",
       "\n",
       "[3143 rows x 4 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_abs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#worst_fip_patient= abs_cases.sort_values(ascending=False)\n",
    "#worst_fip_patient"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Patients        3952.0\n",
       "Hospitalized     194.0\n",
       "ICU                0.0\n",
       "Death              0.0\n",
       "Name: 21003, dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_abs.loc[\"21003\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "STNAME                                                       Kentucky\n",
       "CTYNAME                                                  Allen County\n",
       "POPESTIMATE2019                                                 21315\n",
       "TOT_MALE                                                        10575\n",
       "TOT_FEMALE                                                      10740\n",
       "0 - 17 years                                                     5372\n",
       "18 - 49 years                                                    7718\n",
       "50 - 64 years                                                    4374\n",
       "65 + years                                                       3851\n",
       "Percent Hispanic                                               0.0216\n",
       "Percent non-Hispanic American Indian/Alaska Native                  0\n",
       "Percent non-Hispanic Asian                                     0.0062\n",
       "Percent non-Hispanic Black                                     0.0099\n",
       "Percent non-Hispanic Native Hawaiian/Pacific Islander               0\n",
       "Percent non-Hispanic White                                     0.9502\n",
       "Percent non-Hispanic Other                                     0.7743\n",
       "Lat                                                           36.7521\n",
       "Lng                                                          -86.2018\n",
       "Name: 21003, dtype: object"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "census_data.loc[\"21003\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Social Vulnerability Index (SVI)                            0.68\n",
       "SVI Category                                        High Concern\n",
       "Percent adults fully vaccinated against COVID-19           0.188\n",
       "Name: 21003, dtype: object"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vaccination_df.loc[\"21003\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Social Vulnerability Index (SVI)                    0.500000\n",
       "Percent adults fully vaccinated against COVID-19    0.188573\n",
       "dtype: float64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vaccination_df.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Patients</th>\n",
       "      <th>Hospitalized</th>\n",
       "      <th>ICU</th>\n",
       "      <th>Death</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FIPS Code</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>NA</th>\n",
       "      <td>1788654.0</td>\n",
       "      <td>59949.0</td>\n",
       "      <td>6205.0</td>\n",
       "      <td>19529.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>06037</th>\n",
       "      <td>1124813.0</td>\n",
       "      <td>81869.0</td>\n",
       "      <td>15949.0</td>\n",
       "      <td>21291.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>04013</th>\n",
       "      <td>531243.0</td>\n",
       "      <td>46700.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8435.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17031</th>\n",
       "      <td>530918.0</td>\n",
       "      <td>31810.0</td>\n",
       "      <td>5525.0</td>\n",
       "      <td>11573.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12086</th>\n",
       "      <td>398878.0</td>\n",
       "      <td>9375.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6136.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Patients  Hospitalized      ICU    Death\n",
       "FIPS Code                                           \n",
       "NA         1788654.0       59949.0   6205.0  19529.0\n",
       "06037      1124813.0       81869.0  15949.0  21291.0\n",
       "04013       531243.0       46700.0      1.0   8435.0\n",
       "17031       530918.0       31810.0   5525.0  11573.0\n",
       "12086       398878.0        9375.0      1.0   6136.0"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#See most affected FIPS and less affected FIPS ( by patient number)\n",
    "worst_fip_patient= total_abs.sort_values(by='Patients', ascending=False)\n",
    "worst_fip_patient.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Patients</th>\n",
       "      <th>Hospitalized</th>\n",
       "      <th>ICU</th>\n",
       "      <th>Death</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FIPS Code</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>06037</th>\n",
       "      <td>1124813.0</td>\n",
       "      <td>81869.0</td>\n",
       "      <td>15949.0</td>\n",
       "      <td>21291.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>04013</th>\n",
       "      <td>531243.0</td>\n",
       "      <td>46700.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8435.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17031</th>\n",
       "      <td>530918.0</td>\n",
       "      <td>31810.0</td>\n",
       "      <td>5525.0</td>\n",
       "      <td>11573.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12086</th>\n",
       "      <td>398878.0</td>\n",
       "      <td>9375.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6136.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>06071</th>\n",
       "      <td>289868.0</td>\n",
       "      <td>9806.0</td>\n",
       "      <td>1386.0</td>\n",
       "      <td>3724.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>06065</th>\n",
       "      <td>285987.0</td>\n",
       "      <td>7458.0</td>\n",
       "      <td>824.0</td>\n",
       "      <td>3483.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>06073</th>\n",
       "      <td>274033.0</td>\n",
       "      <td>15143.0</td>\n",
       "      <td>1657.0</td>\n",
       "      <td>2833.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36047</th>\n",
       "      <td>268440.0</td>\n",
       "      <td>33398.0</td>\n",
       "      <td>2396.0</td>\n",
       "      <td>10704.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36081</th>\n",
       "      <td>266518.0</td>\n",
       "      <td>33505.0</td>\n",
       "      <td>2539.0</td>\n",
       "      <td>9928.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>06059</th>\n",
       "      <td>251902.0</td>\n",
       "      <td>10366.0</td>\n",
       "      <td>1875.0</td>\n",
       "      <td>4121.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Patients  Hospitalized      ICU    Death\n",
       "FIPS Code                                           \n",
       "06037      1124813.0       81869.0  15949.0  21291.0\n",
       "04013       531243.0       46700.0      1.0   8435.0\n",
       "17031       530918.0       31810.0   5525.0  11573.0\n",
       "12086       398878.0        9375.0      1.0   6136.0\n",
       "06071       289868.0        9806.0   1386.0   3724.0\n",
       "06065       285987.0        7458.0    824.0   3483.0\n",
       "06073       274033.0       15143.0   1657.0   2833.0\n",
       "36047       268440.0       33398.0   2396.0  10704.0\n",
       "36081       266518.0       33505.0   2539.0   9928.0\n",
       "06059       251902.0       10366.0   1875.0   4121.0"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "worst_ten_pat = worst_fip_patient.iloc[1:11, :]\n",
    "worst_ten_pat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Patients</th>\n",
       "      <th>Hospitalized</th>\n",
       "      <th>ICU</th>\n",
       "      <th>Death</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FIPS Code</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>29177</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29143</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29141</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29139</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29137</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20071</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20181</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20193</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35006</th>\n",
       "      <td>1000.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18175</th>\n",
       "      <td>1002.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1650 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Patients  Hospitalized  ICU  Death\n",
       "FIPS Code                                    \n",
       "29177           0.0           0.0  0.0    0.0\n",
       "29143           0.0           0.0  0.0    0.0\n",
       "29141           0.0           0.0  0.0    0.0\n",
       "29139           0.0           0.0  0.0    0.0\n",
       "29137           0.0           0.0  0.0    0.0\n",
       "...             ...           ...  ...    ...\n",
       "20071           0.0           0.0  0.0    0.0\n",
       "20181           0.0           0.0  0.0    0.0\n",
       "20193           0.0           0.0  0.0    0.0\n",
       "35006        1000.0           0.0  0.0    0.0\n",
       "18175        1002.0          24.0  0.0    0.0\n",
       "\n",
       "[1650 rows x 4 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_fip_patient= total_abs.sort_values(by='Patients', ascending=True)\n",
    "best_fip_patient.head(1650)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#See most affected FIPS and less affected FIPS ( by death number)\n",
    "worst_fip_death = total_abs.sort_values(by='Death', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Patients</th>\n",
       "      <th>Hospitalized</th>\n",
       "      <th>ICU</th>\n",
       "      <th>Death</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FIPS Code</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>06037</th>\n",
       "      <td>1124813.0</td>\n",
       "      <td>81869.0</td>\n",
       "      <td>15949.0</td>\n",
       "      <td>21291.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NA</th>\n",
       "      <td>1788654.0</td>\n",
       "      <td>59949.0</td>\n",
       "      <td>6205.0</td>\n",
       "      <td>19529.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17031</th>\n",
       "      <td>530918.0</td>\n",
       "      <td>31810.0</td>\n",
       "      <td>5525.0</td>\n",
       "      <td>11573.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36047</th>\n",
       "      <td>268440.0</td>\n",
       "      <td>33398.0</td>\n",
       "      <td>2396.0</td>\n",
       "      <td>10704.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36081</th>\n",
       "      <td>266518.0</td>\n",
       "      <td>33505.0</td>\n",
       "      <td>2539.0</td>\n",
       "      <td>9928.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>04013</th>\n",
       "      <td>531243.0</td>\n",
       "      <td>46700.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8435.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36005</th>\n",
       "      <td>176885.0</td>\n",
       "      <td>24002.0</td>\n",
       "      <td>3006.0</td>\n",
       "      <td>6592.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12086</th>\n",
       "      <td>398878.0</td>\n",
       "      <td>9375.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6136.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>06059</th>\n",
       "      <td>251902.0</td>\n",
       "      <td>10366.0</td>\n",
       "      <td>1875.0</td>\n",
       "      <td>4121.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36061</th>\n",
       "      <td>131549.0</td>\n",
       "      <td>15941.0</td>\n",
       "      <td>1095.0</td>\n",
       "      <td>4046.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>06071</th>\n",
       "      <td>289868.0</td>\n",
       "      <td>9806.0</td>\n",
       "      <td>1386.0</td>\n",
       "      <td>3724.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Patients  Hospitalized      ICU    Death\n",
       "FIPS Code                                           \n",
       "06037      1124813.0       81869.0  15949.0  21291.0\n",
       "NA         1788654.0       59949.0   6205.0  19529.0\n",
       "17031       530918.0       31810.0   5525.0  11573.0\n",
       "36047       268440.0       33398.0   2396.0  10704.0\n",
       "36081       266518.0       33505.0   2539.0   9928.0\n",
       "04013       531243.0       46700.0      1.0   8435.0\n",
       "36005       176885.0       24002.0   3006.0   6592.0\n",
       "12086       398878.0        9375.0      1.0   6136.0\n",
       "06059       251902.0       10366.0   1875.0   4121.0\n",
       "36061       131549.0       15941.0   1095.0   4046.0\n",
       "06071       289868.0        9806.0   1386.0   3724.0"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "worst_ten_death = worst_fip_death.iloc[0:11, :]\n",
    "worst_ten_death"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Vaccinated vs. Time "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Time Line for worst FIPS "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Demographic description of most affected FIPS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "## In this section we will decribe the demographic characteristics of the most affected counties, we will also compare them. With this purporse in mind, we will use bar graphics to facilitate the comparison. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "### 1. Data loading and pre-processing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'analysis_data/most_affected.csv'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-22-137ed81b4694>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# We are going to compare the demographic description of the most affected counties\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mmost_affected\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'analysis_data/most_affected.csv'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m'FIPS Code'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mmost_affected\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'FIPS Code'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdrop\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision)\u001b[0m\n\u001b[1;32m    684\u001b[0m     )\n\u001b[1;32m    685\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 686\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    687\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    688\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    450\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    451\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 452\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfp_or_buf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    453\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    454\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    944\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    945\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 946\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    947\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    948\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m   1176\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"c\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1177\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"c\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1178\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCParserWrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1179\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1180\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"python\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m   2006\u001b[0m         \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"usecols\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0musecols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2007\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2008\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparsers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTextReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2009\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2010\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader.__cinit__\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader._setup_parser_source\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'analysis_data/most_affected.csv'"
     ]
    }
   ],
   "source": [
    "# For this analysis, we are going to use the census csv and the most affected csv files.\n",
    "# We are going to compare the demographic description of the most affected counties\n",
    "\n",
    "most_affected= pd.read_csv('analysis_data/most_affected.csv', dtype={'FIPS Code':str})\n",
    "most_affected.set_index('FIPS Code', drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We call the csv census file. \n",
    "# We use the fips code of the most affected counties to select the census information.\n",
    "\n",
    "census_combined = pd.read_csv('clean_data/census_2019_combined.csv', dtype={'FIPS Code':str})\n",
    "census_combined.set_index('FIPS Code', drop=True, inplace=True)\n",
    "census_combined = census_combined.loc[most_affected.index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We call the Vaccination data\n",
    "\n",
    "vaccination = pd.read_csv('analysis_data/vaccination_data.csv', dtype={'FIPS Code':str})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'census_combined' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-24-a21232c06e18>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# In this case, we will select the totals of each gender.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mworst_gender\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcensus_combined\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'TOT_MALE'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'TOT_FEMALE'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'census_combined' is not defined"
     ]
    }
   ],
   "source": [
    "# We start creating the daframes.\n",
    "# In this case, we will select the totals of each gender.\n",
    "\n",
    "worst_gender = census_combined[['TOT_MALE', 'TOT_FEMALE']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'worst_gender' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-25-b504c24ce7bb>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# the relative values we obtained.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mworst_gender_rel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mworst_gender\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"TOT_MALE\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mcensus_combined\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"POPESTIMATE2019\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'REL_MALE'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mworst_gender_rel\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'REL_FEMALE'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mworst_gender\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"TOT_FEMALE\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mcensus_combined\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"POPESTIMATE2019\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'worst_gender' is not defined"
     ]
    }
   ],
   "source": [
    "# In order to observe the real gender values (total divided by county population), we must create a new dataframe with\n",
    "# the relative values we obtained.\n",
    "\n",
    "worst_gender_rel = pd.DataFrame((worst_gender[\"TOT_MALE\"]/census_combined[\"POPESTIMATE2019\"]), columns = ['REL_MALE'])\n",
    "worst_gender_rel['REL_FEMALE'] = worst_gender[\"TOT_FEMALE\"]/census_combined[\"POPESTIMATE2019\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'census_combined' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-26-ad31252e231c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Now, we select the information regarding age.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mworst_agegroup\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcensus_combined\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'0 - 17 years'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'18 - 49 years'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'50 - 64 years'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'65 + years'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'census_combined' is not defined"
     ]
    }
   ],
   "source": [
    "# Now, we select the information regarding age.\n",
    "\n",
    "worst_agegroup = census_combined[['0 - 17 years', '18 - 49 years', '50 - 64 years', '65 + years']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'worst_agegroup' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-27-3eb1f1591619>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# We create the compared age dataframe\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m worst_age_rel = pd.DataFrame((worst_agegroup[\"0 - 17 years\"]/census_combined[\"POPESTIMATE2019\"]), \n\u001b[0m\u001b[1;32m      4\u001b[0m                              columns = ['0 - 17 years'])\n\u001b[1;32m      5\u001b[0m \u001b[0mworst_age_rel\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'18 - 49 years'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mworst_agegroup\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"18 - 49 years\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mcensus_combined\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"POPESTIMATE2019\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'worst_agegroup' is not defined"
     ]
    }
   ],
   "source": [
    "# We create the compared age dataframe\n",
    "\n",
    "worst_age_rel = pd.DataFrame((worst_agegroup[\"0 - 17 years\"]/census_combined[\"POPESTIMATE2019\"]), \n",
    "                             columns = ['0 - 17 years'])\n",
    "worst_age_rel['18 - 49 years'] = worst_agegroup[\"18 - 49 years\"]/census_combined[\"POPESTIMATE2019\"]\n",
    "worst_age_rel['50 - 64 years'] = worst_agegroup[\"50 - 64 years\"]/census_combined[\"POPESTIMATE2019\"]\n",
    "worst_age_rel['65 + years'] = worst_agegroup[\"65 + years\"]/census_combined[\"POPESTIMATE2019\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'census_combined' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-28-0688f5ae062a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# Since the information is already in percentages, so we don't need a compared dataframe.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m worst_ethnic = census_combined[['Percent Hispanic', 'Percent non-Hispanic American Indian/Alaska Native', \n\u001b[0m\u001b[1;32m      5\u001b[0m                                 \u001b[0;34m'Percent non-Hispanic Asian'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Percent non-Hispanic Black'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m                                 \u001b[0;34m'Percent non-Hispanic Native Hawaiian/Pacific Islander'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'census_combined' is not defined"
     ]
    }
   ],
   "source": [
    "# We create the ehtnic group dataframe\n",
    "# Since the information is already in percentages, so we don't need a compared dataframe.\n",
    "\n",
    "worst_ethnic = census_combined[['Percent Hispanic', 'Percent non-Hispanic American Indian/Alaska Native', \n",
    "                                'Percent non-Hispanic Asian', 'Percent non-Hispanic Black', \n",
    "                                'Percent non-Hispanic Native Hawaiian/Pacific Islander', \n",
    "                                'Percent non-Hispanic White']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'worst_gender' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-29-e918e5cca80e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# Since we have fully usable dataframes, we won't use matplotlib to graph them, we will use .plot()\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mgender_graph\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0mworst_gender\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'bar'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwidth\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0.75\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m12\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'mediumturquoise'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'palevioletred'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mgender_graph\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Population Vaccinated by Sex\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'worst_gender' is not defined"
     ]
    }
   ],
   "source": [
    "# We begin with the visualization\n",
    "# In order to fully observe the variations of the demographic characteristics, we chose a graph bar for this section.\n",
    "# Since we have fully usable dataframes, we won't use matplotlib to graph them, we will use .plot()\n",
    "\n",
    "gender_graph= worst_gender.plot(kind='bar', width = 0.75, figsize=(12,5), color=['mediumturquoise', 'palevioletred'])\n",
    "gender_graph\n",
    "plt.title(\"Population Vaccinated by Sex\")\n",
    "plt.xlabel(\"FIPS Code\")\n",
    "plt.ylabel(\"Number of persons vaccinated in millions\")\n",
    "plt.savefig('figures/gender_graph_abs.png', dpi=300, bbox_inches = \"tight\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'worst_gender_rel' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-30-f2b7d74ea740>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Now we use the compared gender dataframe to create a friendly visualization.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mgender_graph_rel\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0mworst_gender_rel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'bar'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwidth\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0.75\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m12\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'thistle'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'teal'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mgender_graph_rel\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Population Vaccinated by Sex (Relative)\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'worst_gender_rel' is not defined"
     ]
    }
   ],
   "source": [
    "# Now we use the compared gender dataframe to create a friendly visualization. \n",
    "\n",
    "gender_graph_rel= worst_gender_rel.plot(kind='bar', width = 0.75, figsize=(12, 5), color=['thistle', 'teal'])\n",
    "gender_graph_rel\n",
    "plt.title(\"Population Vaccinated by Sex (Relative)\")\n",
    "plt.xlabel(\"FIPS Code\")\n",
    "plt.ylabel(\"Number of persons vaccinated\")\n",
    "plt.savefig('figures/gender_graph_rel.png', dpi=300, bbox_inches = \"tight\")\n",
    "\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'worst_agegroup' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-31-acd7799bf45e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# We repeat the process for the Age Group dataframe\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mworst_agegroup\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'bar'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m12\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'mediumslateblue'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'plum'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'teal'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Population Vaccinated by Age Group\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"FIPS Code\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'worst_agegroup' is not defined"
     ]
    }
   ],
   "source": [
    "# We repeat the process for the Age Group dataframe\n",
    "\n",
    "worst_agegroup.plot(kind='bar', figsize=(12,5), color=['mediumslateblue', 'plum', 'teal'])\n",
    "plt.title(\"Population Vaccinated by Age Group\")\n",
    "plt.xlabel(\"FIPS Code\")\n",
    "plt.ylabel(\"Number of persons vaccinated in millions\")\n",
    "plt.savefig('figures/worst_agegroup.png', dpi=300, bbox_inches = \"tight\")\n",
    "\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'worst_age_rel' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-32-acee5aa75a83>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Same process for the compared Age Group.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mage_rel_grahp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mworst_age_rel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'bar'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m12\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'palevioletred'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'mediumpurple'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'mediumaquamarine'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Population Vaccinated by Age Group (Relative)\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"FIPS Code\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'worst_age_rel' is not defined"
     ]
    }
   ],
   "source": [
    "# Same process for the compared Age Group.\n",
    "\n",
    "age_rel_grahp = worst_age_rel.plot(kind='bar', figsize=(12, 5), color=['palevioletred', 'mediumpurple', 'mediumaquamarine'])\n",
    "plt.title(\"Population Vaccinated by Age Group (Relative)\")\n",
    "plt.xlabel(\"FIPS Code\")\n",
    "plt.ylabel(\"Number of persons vaccinated in millions\")\n",
    "plt.savefig('figures/age_rel_grahp.png', dpi=300, bbox_inches = \"tight\")\n",
    "\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'worst_ethnic' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-33-c1a35c6fe973>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# We follow the same process for the percentages of ethnic group.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mworst_ethnic\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'bar'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m12\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'best'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbbox_to_anchor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1.0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Population Vaccinated by Ethnic Group\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'worst_ethnic' is not defined"
     ]
    }
   ],
   "source": [
    "# We follow the same process for the percentages of ethnic group.\n",
    "\n",
    "worst_ethnic.plot(kind='bar', figsize=(12, 5))\n",
    "plt.legend(loc='best', bbox_to_anchor=(1.0, 0.5))\n",
    "plt.title(\"Population Vaccinated by Ethnic Group\")\n",
    "plt.xlabel(\"FIPS Code\")\n",
    "plt.ylabel(\"Number of persons vaccinated in millions\")\n",
    "plt.savefig('figures/worst_fips_eth.png', dpi=300, bbox_inches = \"tight\")\n",
    "\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Demographic regressions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "## In this section, we will see if there is a relation between the fully vaccinated adults and their ethnic group. In order to do this, we'll make scatter plots, we'll calculate the Pearson Coefficient, the Linear regression Coefficient and graph it, all of this for each ethnic group. We'll do this in hopes of finding a relation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We create the dataframe we need from the Vaccionation Dataset previously imported. \n",
    "\n",
    "full = vaccination['Percent adults fully vaccinated against COVID-19']\n",
    "hisp = vaccination['Percent Hispanic']\n",
    "nat = vaccination['Percent non-Hispanic American Indian/Alaska Native']\n",
    "asian = vaccination['Percent non-Hispanic Asian']\n",
    "black = vaccination['Percent non-Hispanic Black']\n",
    "pac = vaccination['Percent non-Hispanic Native Hawaiian/Pacific Islander']\n",
    "white = vaccination['Percent non-Hispanic White']\n",
    "\n",
    "pers_vaccinated = pd.DataFrame(data={full.name:full, hisp.name:hisp, nat.name:nat, asian.name:asian, black.name:black, \n",
    "                                    pac.name:pac, white.name:white})\n",
    "\n",
    "# In order to do the linear regression, our dataframe must be clean from empty values and NAN's. In order to do this,\n",
    "# dropna()\n",
    "\n",
    "pers_vaccinated.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'stats' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-36-b61bc7eb4afd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;31m# We run the linear regression, graphic it and calculate the coefficients.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0mvc_slope\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvc_int\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvc_r\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvc_p\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvc_std_err\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstats\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinregress\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhisp_vacc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0madults_vacc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0mvc_fit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvc_slope\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mhisp_vacc\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mvc_int\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhisp_vacc\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mvc_fit\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"--\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'stats' is not defined"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# To create our scatter plots, we must define our variables. Y variable will be the fully vaccionated adults \n",
    "# and x will be the percentage of each ethnic group. \n",
    "\n",
    "adults_vacc = pers_vaccinated['Percent adults fully vaccinated against COVID-19']\n",
    "hisp_vacc= pers_vaccinated['Percent Hispanic']\n",
    "plt.scatter(hisp_vacc, adults_vacc, color='palevioletred', alpha=0.5, edgecolors= 'black')\n",
    "plt.title(\"Correlation between Percentage of Fully Vaccinated adults and Percentage of Vaccinates Hispanic \")\n",
    "plt.ylabel(\"Percentage of Adults Vaccinated\")\n",
    "plt.xlabel(\"Percentage of Hispanic Vaccinated\")\n",
    "\n",
    "# We run the linear regression, graphic it and calculate the coefficients. \n",
    "\n",
    "vc_slope, vc_int, vc_r, vc_p, vc_std_err = stats.linregress(hisp_vacc, adults_vacc)\n",
    "vc_fit = vc_slope * hisp_vacc + vc_int\n",
    "plt.plot(hisp_vacc,vc_fit,\"--\")\n",
    "\n",
    "print(f\"Pearson correlation coefficient (r-value): {round(st.pearsonr(hisp_vacc, adults_vacc)[0],2)}\")\n",
    "(slope, intercept, rvalue, pvalue, stderr) = st.linregress(hisp_vacc, adults_vacc)\n",
    "print(f\"Linear reggression coefficient of detemination (r-squared): {rvalue**2:.4f}\")\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'stats' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-37-ddc34b9a2221>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0mvc_slope\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvc_int\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvc_r\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvc_p\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvc_std_err\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstats\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinregress\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnat_vacc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0madults_vacc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m \u001b[0mvc_fit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvc_slope\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mnat_vacc\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mvc_int\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnat_vacc\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mvc_fit\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"--\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'stats' is not defined"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We will repeat this process for each ethnic group. \n",
    "\n",
    "nat_vacc= pers_vaccinated['Percent non-Hispanic American Indian/Alaska Native']\n",
    "plt.scatter(nat_vacc, adults_vacc, color='mediumaquamarine', alpha=0.5, edgecolors= 'black')\n",
    "plt.title(\"Correlation between Percentage of Fully Vaccinated adults and Percentage of Vaccinated Native Americans \")\n",
    "plt.ylabel(\"Percentage of Adults Vaccinated\")\n",
    "plt.xlabel(\"Percentage of American Indian/Alaska Native Vaccinated\")\n",
    "\n",
    "\n",
    "vc_slope, vc_int, vc_r, vc_p, vc_std_err = stats.linregress(nat_vacc, adults_vacc)\n",
    "vc_fit = vc_slope * nat_vacc + vc_int\n",
    "plt.plot(nat_vacc,vc_fit,\"--\")\n",
    "\n",
    "\n",
    "print(f\"Pearson correlation coefficient (r-value): {round(st.pearsonr(nat_vacc, adults_vacc)[0],2)}\")\n",
    "\n",
    "(slope, intercept, rvalue, pvalue, stderr) = st.linregress(nat_vacc, adults_vacc)\n",
    "print(f\"Linear reggression coefficient of detemination (r-squared): {rvalue**2:.4f}\")\n",
    "\n",
    "\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'stats' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-38-3e99adc4166f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mvc_slope\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvc_int\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvc_r\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvc_p\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvc_std_err\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstats\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinregress\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0masian_vacc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0madults_vacc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0mvc_fit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvc_slope\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0masian_vacc\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mvc_int\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0masian_vacc\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mvc_fit\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"--\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'stats' is not defined"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "asian_vacc= pers_vaccinated['Percent non-Hispanic Asian']\n",
    "plt.scatter( asian_vacc, adults_vacc, color='mediumpurple', alpha=0.5, edgecolors= 'black')\n",
    "plt.title(\"Correlation between Percentage of Fully Vaccinated adults and Percentage of Vaccinated Asian\")\n",
    "plt.ylabel(\"Percentage of Adults Vaccinated\")\n",
    "plt.xlabel(\"Percentage of Asian Vaccinated\")\n",
    "\n",
    "\n",
    "vc_slope, vc_int, vc_r, vc_p, vc_std_err = stats.linregress(asian_vacc, adults_vacc)\n",
    "vc_fit = vc_slope * asian_vacc + vc_int\n",
    "plt.plot(asian_vacc,vc_fit,\"--\")\n",
    "\n",
    "\n",
    "print(f\"Pearson correlation coefficient (r-value): {round(st.pearsonr(asian_vacc, adults_vacc)[0],2)}\")\n",
    "(slope, intercept, rvalue, pvalue, stderr) = st.linregress(asian_vacc, adults_vacc)\n",
    "print(f\"Linear reggression coefficient of detemination (r-squared): {rvalue**2:.4f}\")\n",
    "\n",
    "\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'stats' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-39-ebaefdb54bd6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mvc_slope\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvc_int\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvc_r\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvc_p\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvc_std_err\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstats\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinregress\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mblack_vacc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0madults_vacc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0mvc_fit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvc_slope\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mblack_vacc\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mvc_int\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mblack_vacc\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mvc_fit\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"--\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'stats' is not defined"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "black_vacc= pers_vaccinated['Percent non-Hispanic Black']\n",
    "plt.scatter(black_vacc, adults_vacc, color='salmon', alpha=0.5, edgecolors= 'black')\n",
    "plt.title(\"Correlation between Percentage of Fully Vaccinated adults and Percentage of Vaccinated Black \")\n",
    "plt.ylabel(\"Percentage of Adults Vaccinated\")\n",
    "plt.xlabel(\"Percentage of Black Vaccinated\")\n",
    "\n",
    "\n",
    "vc_slope, vc_int, vc_r, vc_p, vc_std_err = stats.linregress(black_vacc, adults_vacc)\n",
    "vc_fit = vc_slope * black_vacc + vc_int\n",
    "plt.plot(black_vacc,vc_fit,\"--\")\n",
    "\n",
    "print(f\"Pearson correlation coefficient (r-value): {round(st.pearsonr(black_vacc, adults_vacc)[0],2)}\")\n",
    "(slope, intercept, rvalue, pvalue, stderr) = st.linregress(black_vacc, adults_vacc)\n",
    "print(f\"Linear reggression coefficient of detemination (r-squared): {rvalue**2:.4f}\")\n",
    "\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'stats' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-40-44612e0599a1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mvc_slope\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvc_int\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvc_r\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvc_p\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvc_std_err\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstats\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinregress\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpacific_vacc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0madults_vacc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0mvc_fit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvc_slope\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mpacific_vacc\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mvc_int\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpacific_vacc\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mvc_fit\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"--\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'stats' is not defined"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pacific_vacc= pers_vaccinated['Percent non-Hispanic Native Hawaiian/Pacific Islander']\n",
    "plt.scatter(pacific_vacc, adults_vacc, color='indigo', alpha=0.5, edgecolors= 'black')\n",
    "plt.title(\"Correlation between Percentage of Fully Vaccinated adults and Percentage of Vaccinated Pacific Islander\")\n",
    "plt.ylabel(\"Percentage of Adults Vaccinated\")\n",
    "plt.xlabel(\"Percentage of Native Hawaiian/Pacific Islander Vaccinated\")\n",
    "\n",
    "\n",
    "vc_slope, vc_int, vc_r, vc_p, vc_std_err = stats.linregress(pacific_vacc, adults_vacc)\n",
    "vc_fit = vc_slope * pacific_vacc + vc_int\n",
    "plt.plot(pacific_vacc,vc_fit,\"--\")\n",
    "\n",
    "print(f\"Pearson correlation coefficient (r-value): {round(st.pearsonr(pacific_vacc, adults_vacc)[0],2)}\")\n",
    "(slope, intercept, rvalue, pvalue, stderr) = st.linregress(pacific_vacc, adults_vacc)\n",
    "print(f\"Linear reggression coefficient of detemination (r-squared): {rvalue**2:.4f}\")\n",
    "\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'stats' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-41-ab51453a5b4a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mvc_slope\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvc_int\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvc_r\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvc_p\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvc_std_err\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstats\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinregress\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwhite_vacc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0madults_vacc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0mvc_fit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvc_slope\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mwhite_vacc\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mvc_int\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwhite_vacc\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mvc_fit\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"--\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'stats' is not defined"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "white_vacc= pers_vaccinated['Percent non-Hispanic White']\n",
    "plt.scatter(white_vacc, adults_vacc, color='silver', alpha=0.5, edgecolors= 'black')\n",
    "plt.title(\"Correlation between Percentage of Fully Vaccinated adults and Percentage of Vaccinates White\")\n",
    "plt.ylabel(\"Percentage of Adults Vaccinated\")\n",
    "plt.xlabel(\"Percentage of White Vaccinated\")\n",
    "\n",
    "\n",
    "vc_slope, vc_int, vc_r, vc_p, vc_std_err = stats.linregress(white_vacc, adults_vacc)\n",
    "vc_fit = vc_slope * white_vacc + vc_int\n",
    "plt.plot(white_vacc,vc_fit,\"--\")\n",
    "\n",
    "print(f\"Pearson correlation coefficient (r-value): {round(st.pearsonr(white_vacc, adults_vacc)[0],2)}\")\n",
    "(slope, intercept, rvalue, pvalue, stderr) = st.linregress(white_vacc, adults_vacc)\n",
    "print(f\"Linear reggression coefficient of detemination (r-squared): {rvalue**2:.4f}\")\n",
    "\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Scatter (patients and vaccinated) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Heatmap "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gmaps\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "#First we have to pull from Google Maps API using our API key \n",
    "gmaps.configure(api_key='AIzaSyBt_u46EkKVtY2b5DBsZ5bOARyQcq_FE8I')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-44-e4a3b82077a2>:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data[\"SVI\"] = vaccination_df[[\"Social Vulnerability Index (SVI)\"]]\n",
      "<ipython-input-44-e4a3b82077a2>:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data[\"SVI\"] = data[\"SVI\"].fillna(0.0)\n",
      "<ipython-input-44-e4a3b82077a2>:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data[\"Vaccinated%\"] = vaccination_df[[\"Percent adults fully vaccinated against COVID-19\"]]\n",
      "<ipython-input-44-e4a3b82077a2>:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data[\"Vaccinated%\"] = data[\"Vaccinated%\"].fillna(0.0)\n",
      "<ipython-input-44-e4a3b82077a2>:8: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data.dropna(subset = [\"Lat\"], inplace=True)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Lat</th>\n",
       "      <th>Lng</th>\n",
       "      <th>SVI</th>\n",
       "      <th>Vaccinated%</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FIPS Code</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>01001</th>\n",
       "      <td>32.562500</td>\n",
       "      <td>-86.547800</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>01003</th>\n",
       "      <td>30.554945</td>\n",
       "      <td>-87.723960</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>01005</th>\n",
       "      <td>31.787050</td>\n",
       "      <td>-85.429850</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>01007</th>\n",
       "      <td>33.059925</td>\n",
       "      <td>-87.145725</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>01009</th>\n",
       "      <td>33.957085</td>\n",
       "      <td>-86.576808</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56037</th>\n",
       "      <td>41.670024</td>\n",
       "      <td>-109.198271</td>\n",
       "      <td>0.37</td>\n",
       "      <td>0.228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56039</th>\n",
       "      <td>43.515844</td>\n",
       "      <td>-110.815633</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56041</th>\n",
       "      <td>41.293529</td>\n",
       "      <td>-110.539357</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56043</th>\n",
       "      <td>44.018750</td>\n",
       "      <td>-107.701300</td>\n",
       "      <td>0.37</td>\n",
       "      <td>0.264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56045</th>\n",
       "      <td>43.938550</td>\n",
       "      <td>-104.357075</td>\n",
       "      <td>0.35</td>\n",
       "      <td>0.216</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3132 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Lat         Lng   SVI  Vaccinated%\n",
       "FIPS Code                                          \n",
       "01001      32.562500  -86.547800  0.00        0.000\n",
       "01003      30.554945  -87.723960  0.00        0.000\n",
       "01005      31.787050  -85.429850  0.00        0.000\n",
       "01007      33.059925  -87.145725  0.00        0.000\n",
       "01009      33.957085  -86.576808  0.00        0.000\n",
       "...              ...         ...   ...          ...\n",
       "56037      41.670024 -109.198271  0.37        0.228\n",
       "56039      43.515844 -110.815633  0.11        0.305\n",
       "56041      41.293529 -110.539357  0.45        0.206\n",
       "56043      44.018750 -107.701300  0.37        0.264\n",
       "56045      43.938550 -104.357075  0.35        0.216\n",
       "\n",
       "[3132 rows x 4 columns]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Now we want to create a customized DF with only the values we're interested in, which are lat and long, SVI and percent of adults that are fully vaccinated \n",
    "\n",
    "data = census_data[[\"Lat\", \"Lng\"]]\n",
    "data[\"SVI\"] = vaccination_df[[\"Social Vulnerability Index (SVI)\"]]\n",
    "data[\"SVI\"] = data[\"SVI\"].fillna(0.0)\n",
    "data[\"Vaccinated%\"] = vaccination_df[[\"Percent adults fully vaccinated against COVID-19\"]]\n",
    "data[\"Vaccinated%\"] = data[\"Vaccinated%\"].fillna(0.0)\n",
    "data.dropna(subset = [\"Lat\"], inplace=True)\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Now, we need to tell GMaps what variables we want to show and where it should display them \n",
    "\n",
    "locations = data[[\"Lat\", \"Lng\"]]\n",
    "\n",
    "weights_SVI = data[\"SVI\"]\n",
    "heatmap_layer_SVI = gmaps.heatmap_layer(locations, weights=weights_SVI, point_radius=10)\n",
    "\n",
    "weights_vaccinated = data[\"Vaccinated%\"]\n",
    "heatmap_layer_vaccinated = gmaps.heatmap_layer(locations, weights=weights_vaccinated, point_radius=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "52cd116536994009affa643c11b46f13",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Figure(layout=FigureLayout(height='420px'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#We create a map with only the SVI variable activated \n",
    "fig = gmaps.figure()\n",
    "\n",
    "fig.add_layer(heatmap_layer_SVI)\n",
    "\n",
    "fig"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "be371ba7aa4c43618c70faee0e143319",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Figure(layout=FigureLayout(height='420px'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#We create a map with only the vaccinated percentage activated \n",
    "fig = gmaps.figure()\n",
    "\n",
    "fig.add_layer(heatmap_layer_vaccinated)\n",
    "\n",
    "fig"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6934eec7c526425fa1516f5a1d236376",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Figure(layout=FigureLayout(height='420px'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#We create an overlay where we can see the coexistence of both variables on a map \n",
    "fig = gmaps.figure()\n",
    "\n",
    "fig.add_layer(heatmap_layer_SVI)\n",
    "fig.add_layer(heatmap_layer_vaccinated)\n",
    "\n",
    "fig"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Now, we want to see if there is a correlation between SVI index in each state and the amount of COVID cases\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Patients</th>\n",
       "      <th>Hospitalized</th>\n",
       "      <th>ICU</th>\n",
       "      <th>Death</th>\n",
       "      <th>STNAME</th>\n",
       "      <th>CTYNAME</th>\n",
       "      <th>POPESTIMATE2019</th>\n",
       "      <th>TOT_MALE</th>\n",
       "      <th>TOT_FEMALE</th>\n",
       "      <th>0 - 17 years</th>\n",
       "      <th>...</th>\n",
       "      <th>Percent non-Hispanic Asian</th>\n",
       "      <th>Percent non-Hispanic Black</th>\n",
       "      <th>Percent non-Hispanic Native Hawaiian/Pacific Islander</th>\n",
       "      <th>Percent non-Hispanic White</th>\n",
       "      <th>Percent non-Hispanic Other</th>\n",
       "      <th>Lat</th>\n",
       "      <th>Lng</th>\n",
       "      <th>Social Vulnerability Index (SVI)</th>\n",
       "      <th>SVI Category</th>\n",
       "      <th>Percent adults fully vaccinated against COVID-19</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FIPS Code</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10001</th>\n",
       "      <td>14396.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Delaware</td>\n",
       "      <td>Kent County</td>\n",
       "      <td>180786</td>\n",
       "      <td>87058</td>\n",
       "      <td>93728</td>\n",
       "      <td>46483</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0199</td>\n",
       "      <td>0.2510</td>\n",
       "      <td>0.0005</td>\n",
       "      <td>0.6159</td>\n",
       "      <td>0.4857</td>\n",
       "      <td>39.101800</td>\n",
       "      <td>-75.544269</td>\n",
       "      <td>0.73</td>\n",
       "      <td>High Concern</td>\n",
       "      <td>0.167</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10003</th>\n",
       "      <td>57038.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Delaware</td>\n",
       "      <td>New Castle County</td>\n",
       "      <td>558753</td>\n",
       "      <td>270456</td>\n",
       "      <td>288297</td>\n",
       "      <td>135604</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0547</td>\n",
       "      <td>0.2455</td>\n",
       "      <td>0.0003</td>\n",
       "      <td>0.5744</td>\n",
       "      <td>0.4189</td>\n",
       "      <td>39.683520</td>\n",
       "      <td>-75.617992</td>\n",
       "      <td>0.38</td>\n",
       "      <td>Low Concern</td>\n",
       "      <td>0.179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10005</th>\n",
       "      <td>22694.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Delaware</td>\n",
       "      <td>Sussex County</td>\n",
       "      <td>234225</td>\n",
       "      <td>113279</td>\n",
       "      <td>120946</td>\n",
       "      <td>46825</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0122</td>\n",
       "      <td>0.1181</td>\n",
       "      <td>0.0003</td>\n",
       "      <td>0.7496</td>\n",
       "      <td>0.5195</td>\n",
       "      <td>38.645065</td>\n",
       "      <td>-75.305892</td>\n",
       "      <td>0.40</td>\n",
       "      <td>Moderate Concern</td>\n",
       "      <td>0.255</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11001</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>District of Columbia</td>\n",
       "      <td>District of Columbia</td>\n",
       "      <td>705749</td>\n",
       "      <td>334711</td>\n",
       "      <td>371038</td>\n",
       "      <td>149337</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0393</td>\n",
       "      <td>0.4544</td>\n",
       "      <td>0.0004</td>\n",
       "      <td>0.3658</td>\n",
       "      <td>0.2389</td>\n",
       "      <td>38.904700</td>\n",
       "      <td>-77.016300</td>\n",
       "      <td>0.60</td>\n",
       "      <td>Moderate Concern</td>\n",
       "      <td>0.155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12001</th>\n",
       "      <td>20318.0</td>\n",
       "      <td>628.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>Florida</td>\n",
       "      <td>Alachua County</td>\n",
       "      <td>269043</td>\n",
       "      <td>129680</td>\n",
       "      <td>139363</td>\n",
       "      <td>62293</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0606</td>\n",
       "      <td>0.1983</td>\n",
       "      <td>0.0006</td>\n",
       "      <td>0.6105</td>\n",
       "      <td>0.3974</td>\n",
       "      <td>29.686278</td>\n",
       "      <td>-82.385311</td>\n",
       "      <td>0.47</td>\n",
       "      <td>Moderate Concern</td>\n",
       "      <td>0.241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56037</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Wyoming</td>\n",
       "      <td>Sweetwater County</td>\n",
       "      <td>42343</td>\n",
       "      <td>21808</td>\n",
       "      <td>20535</td>\n",
       "      <td>12049</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0074</td>\n",
       "      <td>0.0112</td>\n",
       "      <td>0.0003</td>\n",
       "      <td>0.7956</td>\n",
       "      <td>0.5841</td>\n",
       "      <td>41.670024</td>\n",
       "      <td>-109.198271</td>\n",
       "      <td>0.37</td>\n",
       "      <td>Low Concern</td>\n",
       "      <td>0.228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56039</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Wyoming</td>\n",
       "      <td>Teton County</td>\n",
       "      <td>23464</td>\n",
       "      <td>12142</td>\n",
       "      <td>11322</td>\n",
       "      <td>4586</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0125</td>\n",
       "      <td>0.0124</td>\n",
       "      <td>0.0012</td>\n",
       "      <td>0.8134</td>\n",
       "      <td>0.5153</td>\n",
       "      <td>43.515844</td>\n",
       "      <td>-110.815633</td>\n",
       "      <td>0.11</td>\n",
       "      <td>Very Low Concern</td>\n",
       "      <td>0.305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56041</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Wyoming</td>\n",
       "      <td>Uinta County</td>\n",
       "      <td>20226</td>\n",
       "      <td>10224</td>\n",
       "      <td>10002</td>\n",
       "      <td>6215</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0016</td>\n",
       "      <td>0.0011</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.8752</td>\n",
       "      <td>0.6935</td>\n",
       "      <td>41.293529</td>\n",
       "      <td>-110.539357</td>\n",
       "      <td>0.45</td>\n",
       "      <td>Moderate Concern</td>\n",
       "      <td>0.206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56043</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Wyoming</td>\n",
       "      <td>Washakie County</td>\n",
       "      <td>7805</td>\n",
       "      <td>3963</td>\n",
       "      <td>3842</td>\n",
       "      <td>1960</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0004</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.8190</td>\n",
       "      <td>0.5881</td>\n",
       "      <td>44.018750</td>\n",
       "      <td>-107.701300</td>\n",
       "      <td>0.37</td>\n",
       "      <td>Low Concern</td>\n",
       "      <td>0.264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56045</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Wyoming</td>\n",
       "      <td>Weston County</td>\n",
       "      <td>6927</td>\n",
       "      <td>3624</td>\n",
       "      <td>3303</td>\n",
       "      <td>1529</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0077</td>\n",
       "      <td>0.0023</td>\n",
       "      <td>0.0011</td>\n",
       "      <td>0.9637</td>\n",
       "      <td>0.7604</td>\n",
       "      <td>43.938550</td>\n",
       "      <td>-104.357075</td>\n",
       "      <td>0.35</td>\n",
       "      <td>Low Concern</td>\n",
       "      <td>0.216</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2826 rows Ã— 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Patients  Hospitalized  ICU  Death                STNAME  \\\n",
       "FIPS Code                                                             \n",
       "10001       14396.0          12.0  1.0    0.0              Delaware   \n",
       "10003       57038.0          22.0  0.0    0.0              Delaware   \n",
       "10005       22694.0           8.0  0.0    0.0              Delaware   \n",
       "11001           0.0           0.0  0.0    0.0  District of Columbia   \n",
       "12001       20318.0         628.0  0.0   67.0               Florida   \n",
       "...             ...           ...  ...    ...                   ...   \n",
       "56037           0.0           0.0  0.0    0.0               Wyoming   \n",
       "56039           0.0           0.0  0.0    0.0               Wyoming   \n",
       "56041           0.0           0.0  0.0    0.0               Wyoming   \n",
       "56043           0.0           0.0  0.0    0.0               Wyoming   \n",
       "56045           0.0           0.0  0.0    0.0               Wyoming   \n",
       "\n",
       "                        CTYNAME  POPESTIMATE2019  TOT_MALE  TOT_FEMALE  \\\n",
       "FIPS Code                                                                \n",
       "10001               Kent County           180786     87058       93728   \n",
       "10003         New Castle County           558753    270456      288297   \n",
       "10005             Sussex County           234225    113279      120946   \n",
       "11001      District of Columbia           705749    334711      371038   \n",
       "12001            Alachua County           269043    129680      139363   \n",
       "...                         ...              ...       ...         ...   \n",
       "56037         Sweetwater County            42343     21808       20535   \n",
       "56039              Teton County            23464     12142       11322   \n",
       "56041              Uinta County            20226     10224       10002   \n",
       "56043           Washakie County             7805      3963        3842   \n",
       "56045             Weston County             6927      3624        3303   \n",
       "\n",
       "           0 - 17 years  ...  Percent non-Hispanic Asian  \\\n",
       "FIPS Code                ...                               \n",
       "10001             46483  ...                      0.0199   \n",
       "10003            135604  ...                      0.0547   \n",
       "10005             46825  ...                      0.0122   \n",
       "11001            149337  ...                      0.0393   \n",
       "12001             62293  ...                      0.0606   \n",
       "...                 ...  ...                         ...   \n",
       "56037             12049  ...                      0.0074   \n",
       "56039              4586  ...                      0.0125   \n",
       "56041              6215  ...                      0.0016   \n",
       "56043              1960  ...                      0.0000   \n",
       "56045              1529  ...                      0.0077   \n",
       "\n",
       "           Percent non-Hispanic Black  \\\n",
       "FIPS Code                               \n",
       "10001                          0.2510   \n",
       "10003                          0.2455   \n",
       "10005                          0.1181   \n",
       "11001                          0.4544   \n",
       "12001                          0.1983   \n",
       "...                               ...   \n",
       "56037                          0.0112   \n",
       "56039                          0.0124   \n",
       "56041                          0.0011   \n",
       "56043                          0.0004   \n",
       "56045                          0.0023   \n",
       "\n",
       "           Percent non-Hispanic Native Hawaiian/Pacific Islander  \\\n",
       "FIPS Code                                                          \n",
       "10001                                                 0.0005       \n",
       "10003                                                 0.0003       \n",
       "10005                                                 0.0003       \n",
       "11001                                                 0.0004       \n",
       "12001                                                 0.0006       \n",
       "...                                                      ...       \n",
       "56037                                                 0.0003       \n",
       "56039                                                 0.0012       \n",
       "56041                                                 0.0000       \n",
       "56043                                                 0.0000       \n",
       "56045                                                 0.0011       \n",
       "\n",
       "           Percent non-Hispanic White  Percent non-Hispanic Other        Lat  \\\n",
       "FIPS Code                                                                      \n",
       "10001                          0.6159                      0.4857  39.101800   \n",
       "10003                          0.5744                      0.4189  39.683520   \n",
       "10005                          0.7496                      0.5195  38.645065   \n",
       "11001                          0.3658                      0.2389  38.904700   \n",
       "12001                          0.6105                      0.3974  29.686278   \n",
       "...                               ...                         ...        ...   \n",
       "56037                          0.7956                      0.5841  41.670024   \n",
       "56039                          0.8134                      0.5153  43.515844   \n",
       "56041                          0.8752                      0.6935  41.293529   \n",
       "56043                          0.8190                      0.5881  44.018750   \n",
       "56045                          0.9637                      0.7604  43.938550   \n",
       "\n",
       "                  Lng  Social Vulnerability Index (SVI)      SVI Category  \\\n",
       "FIPS Code                                                                   \n",
       "10001      -75.544269                              0.73      High Concern   \n",
       "10003      -75.617992                              0.38       Low Concern   \n",
       "10005      -75.305892                              0.40  Moderate Concern   \n",
       "11001      -77.016300                              0.60  Moderate Concern   \n",
       "12001      -82.385311                              0.47  Moderate Concern   \n",
       "...               ...                               ...               ...   \n",
       "56037     -109.198271                              0.37       Low Concern   \n",
       "56039     -110.815633                              0.11  Very Low Concern   \n",
       "56041     -110.539357                              0.45  Moderate Concern   \n",
       "56043     -107.701300                              0.37       Low Concern   \n",
       "56045     -104.357075                              0.35       Low Concern   \n",
       "\n",
       "           Percent adults fully vaccinated against COVID-19  \n",
       "FIPS Code                                                    \n",
       "10001                                                 0.167  \n",
       "10003                                                 0.179  \n",
       "10005                                                 0.255  \n",
       "11001                                                 0.155  \n",
       "12001                                                 0.241  \n",
       "...                                                     ...  \n",
       "56037                                                 0.228  \n",
       "56039                                                 0.305  \n",
       "56041                                                 0.206  \n",
       "56043                                                 0.264  \n",
       "56045                                                 0.216  \n",
       "\n",
       "[2826 rows x 25 columns]"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#So first, we merge previous dataframes so that we can compare our absolute values, pull our location information from the census and compare it to our vaccination df\n",
    "\n",
    "heatmap_data = pd.merge(total_abs, census_data, on='FIPS Code')\n",
    "heatmap_data = pd.merge(heatmap_data, vaccination_df, on='FIPS Code')\n",
    "heatmap_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>STNAME</th>\n",
       "      <th>Patients</th>\n",
       "      <th>SVI Category</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FIPS Code</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>17031</th>\n",
       "      <td>Illinois</td>\n",
       "      <td>530918.0</td>\n",
       "      <td>High Concern</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36047</th>\n",
       "      <td>New York</td>\n",
       "      <td>268440.0</td>\n",
       "      <td>Very High Concern</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36081</th>\n",
       "      <td>New York</td>\n",
       "      <td>266518.0</td>\n",
       "      <td>High Concern</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36005</th>\n",
       "      <td>New York</td>\n",
       "      <td>176885.0</td>\n",
       "      <td>Very High Concern</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12086</th>\n",
       "      <td>Florida</td>\n",
       "      <td>398878.0</td>\n",
       "      <td>Very High Concern</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28025</th>\n",
       "      <td>Mississippi</td>\n",
       "      <td>0.0</td>\n",
       "      <td>High Concern</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28027</th>\n",
       "      <td>Mississippi</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Very High Concern</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28029</th>\n",
       "      <td>Mississippi</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Very High Concern</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28031</th>\n",
       "      <td>Mississippi</td>\n",
       "      <td>0.0</td>\n",
       "      <td>High Concern</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56045</th>\n",
       "      <td>Wyoming</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Low Concern</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2826 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                STNAME  Patients       SVI Category\n",
       "FIPS Code                                          \n",
       "17031         Illinois  530918.0       High Concern\n",
       "36047         New York  268440.0  Very High Concern\n",
       "36081         New York  266518.0       High Concern\n",
       "36005         New York  176885.0  Very High Concern\n",
       "12086          Florida  398878.0  Very High Concern\n",
       "...                ...       ...                ...\n",
       "28025      Mississippi       0.0       High Concern\n",
       "28027      Mississippi       0.0  Very High Concern\n",
       "28029      Mississippi       0.0  Very High Concern\n",
       "28031      Mississippi       0.0       High Concern\n",
       "56045          Wyoming       0.0        Low Concern\n",
       "\n",
       "[2826 rows x 3 columns]"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#We sort our data by amount of deaths and leave only the columns we're interested \n",
    "\n",
    "heatmap_data.sort_values(by=['Death'], inplace=True, ascending=False)\n",
    "heatmap_data = heatmap_data[[\"STNAME\", \"Patients\", \"SVI Category\"]]\n",
    "heatmap_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-52-3a7b8309e76a>:1: FutureWarning: The pandas.np module is deprecated and will be removed from pandas in a future version. Import numpy directly instead\n",
      "  heatmap_data = heatmap_data.replace(0, pd.np.nan).dropna(axis=0, how='any', subset=['Patients'])\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>STNAME</th>\n",
       "      <th>Patients</th>\n",
       "      <th>SVI Category</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FIPS Code</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>17031</th>\n",
       "      <td>Illinois</td>\n",
       "      <td>530918.0</td>\n",
       "      <td>High Concern</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36047</th>\n",
       "      <td>New York</td>\n",
       "      <td>268440.0</td>\n",
       "      <td>Very High Concern</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36081</th>\n",
       "      <td>New York</td>\n",
       "      <td>266518.0</td>\n",
       "      <td>High Concern</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36005</th>\n",
       "      <td>New York</td>\n",
       "      <td>176885.0</td>\n",
       "      <td>Very High Concern</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12086</th>\n",
       "      <td>Florida</td>\n",
       "      <td>398878.0</td>\n",
       "      <td>Very High Concern</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28047</th>\n",
       "      <td>Mississippi</td>\n",
       "      <td>2991.0</td>\n",
       "      <td>Very High Concern</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28059</th>\n",
       "      <td>Mississippi</td>\n",
       "      <td>2412.0</td>\n",
       "      <td>Moderate Concern</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28067</th>\n",
       "      <td>Mississippi</td>\n",
       "      <td>1309.0</td>\n",
       "      <td>Very High Concern</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28035</th>\n",
       "      <td>Mississippi</td>\n",
       "      <td>1034.0</td>\n",
       "      <td>Very High Concern</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28033</th>\n",
       "      <td>Mississippi</td>\n",
       "      <td>2102.0</td>\n",
       "      <td>Low Concern</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1312 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                STNAME  Patients       SVI Category\n",
       "FIPS Code                                          \n",
       "17031         Illinois  530918.0       High Concern\n",
       "36047         New York  268440.0  Very High Concern\n",
       "36081         New York  266518.0       High Concern\n",
       "36005         New York  176885.0  Very High Concern\n",
       "12086          Florida  398878.0  Very High Concern\n",
       "...                ...       ...                ...\n",
       "28047      Mississippi    2991.0  Very High Concern\n",
       "28059      Mississippi    2412.0   Moderate Concern\n",
       "28067      Mississippi    1309.0  Very High Concern\n",
       "28035      Mississippi    1034.0  Very High Concern\n",
       "28033      Mississippi    2102.0        Low Concern\n",
       "\n",
       "[1312 rows x 3 columns]"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "heatmap_data = heatmap_data.replace(0, pd.np.nan).dropna(axis=0, how='any', subset=['Patients'])\n",
    "heatmap_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MultiIndex([(     'Delaware',      'High Concern'),\n",
       "            (     'Delaware',       'Low Concern'),\n",
       "            (     'Delaware',  'Moderate Concern'),\n",
       "            (      'Florida',      'High Concern'),\n",
       "            (      'Florida',       'Low Concern'),\n",
       "            (      'Florida',  'Moderate Concern'),\n",
       "            (      'Florida', 'Very High Concern'),\n",
       "            (      'Florida',  'Very Low Concern'),\n",
       "            (      'Georgia',      'High Concern'),\n",
       "            (      'Georgia',       'Low Concern'),\n",
       "            ...\n",
       "            (   'Washington',      'High Concern'),\n",
       "            (   'Washington',       'Low Concern'),\n",
       "            (   'Washington',  'Moderate Concern'),\n",
       "            (   'Washington', 'Very High Concern'),\n",
       "            (   'Washington',  'Very Low Concern'),\n",
       "            ('West Virginia',  'Moderate Concern'),\n",
       "            (    'Wisconsin',       'Low Concern'),\n",
       "            (    'Wisconsin',  'Moderate Concern'),\n",
       "            (    'Wisconsin', 'Very High Concern'),\n",
       "            (    'Wisconsin',  'Very Low Concern')],\n",
       "           names=['STNAME', 'SVI Category'], length=168)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#We now only want to deal with states, not counties, so we have to group our data. \n",
    "heatmap_data = heatmap_data.groupby(['STNAME','SVI Category']).agg({'Patients': 'sum'})\n",
    "heatmap_data.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             State       SVI Category  Patients  Category Code\n",
      "0         Delaware       High Concern   14396.0              0\n",
      "1         Delaware        Low Concern   57038.0              1\n",
      "2         Delaware   Moderate Concern   22694.0              2\n",
      "3          Florida       High Concern  359713.0              0\n",
      "4          Florida        Low Concern  114211.0              1\n",
      "..             ...                ...       ...            ...\n",
      "163  West Virginia   Moderate Concern    1061.0              2\n",
      "164      Wisconsin        Low Concern  131927.0              1\n",
      "165      Wisconsin   Moderate Concern   60552.0              2\n",
      "166      Wisconsin  Very High Concern   57156.0              3\n",
      "167      Wisconsin   Very Low Concern  251742.0              4\n",
      "\n",
      "[168 rows x 4 columns]\n"
     ]
    }
   ],
   "source": [
    "#Create our visualization by encoding our SVI categorical feature into a numeric array with LabelEncoder\n",
    "\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "heatmap_data.index = heatmap_data.index.set_names(['State', 'SVI Category'])\n",
    "heatmap_data.reset_index(inplace=True)\n",
    "heatmap_data\n",
    "\n",
    "LE = LabelEncoder()\n",
    "heatmap_data['Category Code'] = LE.fit_transform(heatmap_data['SVI Category'])\n",
    "\n",
    "print(heatmap_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Add the categories \n",
    "\n",
    "svi_categories = heatmap_data[['SVI Category']]\n",
    "svi_categories = svi_categories['SVI Category'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['High Concern', 'Low Concern', 'Moderate Concern',\n",
       "       'Very High Concern', 'Very Low Concern'], dtype=object)"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Create array for our SVI categories and assign a category code\n",
    "svi_categories"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Add our variables together \n",
    "heatmap_data = heatmap_data.pivot('State', 'Category Code', 'Patients')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Category Code</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>State</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Delaware</th>\n",
       "      <td>14396.0</td>\n",
       "      <td>57038.0</td>\n",
       "      <td>22694.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Florida</th>\n",
       "      <td>359713.0</td>\n",
       "      <td>114211.0</td>\n",
       "      <td>557352.0</td>\n",
       "      <td>514388.0</td>\n",
       "      <td>35450.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Georgia</th>\n",
       "      <td>127692.0</td>\n",
       "      <td>119516.0</td>\n",
       "      <td>207149.0</td>\n",
       "      <td>171754.0</td>\n",
       "      <td>79353.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hawaii</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2621.0</td>\n",
       "      <td>19833.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Idaho</th>\n",
       "      <td>36174.0</td>\n",
       "      <td>43378.0</td>\n",
       "      <td>34976.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>50691.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Illinois</th>\n",
       "      <td>634782.0</td>\n",
       "      <td>215743.0</td>\n",
       "      <td>199563.0</td>\n",
       "      <td>15806.0</td>\n",
       "      <td>197890.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Indiana</th>\n",
       "      <td>123986.0</td>\n",
       "      <td>53491.0</td>\n",
       "      <td>81088.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>81506.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iowa</th>\n",
       "      <td>24366.0</td>\n",
       "      <td>141559.0</td>\n",
       "      <td>42091.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>60363.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Kansas</th>\n",
       "      <td>15658.0</td>\n",
       "      <td>30905.0</td>\n",
       "      <td>94347.0</td>\n",
       "      <td>38157.0</td>\n",
       "      <td>68794.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Kentucky</th>\n",
       "      <td>63641.0</td>\n",
       "      <td>15813.0</td>\n",
       "      <td>64499.0</td>\n",
       "      <td>20444.0</td>\n",
       "      <td>9237.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Louisiana</th>\n",
       "      <td>4917.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1813.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Maine</th>\n",
       "      <td>1640.0</td>\n",
       "      <td>9097.0</td>\n",
       "      <td>12920.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>29410.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Maryland</th>\n",
       "      <td>60253.0</td>\n",
       "      <td>91794.0</td>\n",
       "      <td>1533.0</td>\n",
       "      <td>31372.0</td>\n",
       "      <td>63890.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Massachusetts</th>\n",
       "      <td>93072.0</td>\n",
       "      <td>264386.0</td>\n",
       "      <td>253654.0</td>\n",
       "      <td>51117.0</td>\n",
       "      <td>15519.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Michigan</th>\n",
       "      <td>93598.0</td>\n",
       "      <td>105049.0</td>\n",
       "      <td>124374.0</td>\n",
       "      <td>77297.0</td>\n",
       "      <td>79517.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Minnesota</th>\n",
       "      <td>56322.0</td>\n",
       "      <td>229756.0</td>\n",
       "      <td>26881.0</td>\n",
       "      <td>3974.0</td>\n",
       "      <td>198124.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mississippi</th>\n",
       "      <td>NaN</td>\n",
       "      <td>5315.0</td>\n",
       "      <td>2412.0</td>\n",
       "      <td>12605.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Missouri</th>\n",
       "      <td>8024.0</td>\n",
       "      <td>15977.0</td>\n",
       "      <td>12274.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6587.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Montana</th>\n",
       "      <td>1951.0</td>\n",
       "      <td>17032.0</td>\n",
       "      <td>12343.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>43795.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nebraska</th>\n",
       "      <td>9702.0</td>\n",
       "      <td>25147.0</td>\n",
       "      <td>62565.0</td>\n",
       "      <td>2672.0</td>\n",
       "      <td>23004.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nevada</th>\n",
       "      <td>242317.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>38233.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>New Hampshire</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6642.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>New Jersey</th>\n",
       "      <td>310709.0</td>\n",
       "      <td>238777.0</td>\n",
       "      <td>130344.0</td>\n",
       "      <td>109379.0</td>\n",
       "      <td>207687.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>New Mexico</th>\n",
       "      <td>16506.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5157.0</td>\n",
       "      <td>29343.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>New York</th>\n",
       "      <td>403519.0</td>\n",
       "      <td>497668.0</td>\n",
       "      <td>663638.0</td>\n",
       "      <td>448749.0</td>\n",
       "      <td>39514.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>North Carolina</th>\n",
       "      <td>310885.0</td>\n",
       "      <td>201291.0</td>\n",
       "      <td>173069.0</td>\n",
       "      <td>213543.0</td>\n",
       "      <td>26852.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>North Dakota</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4782.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12477.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ohio</th>\n",
       "      <td>149539.0</td>\n",
       "      <td>136415.0</td>\n",
       "      <td>174519.0</td>\n",
       "      <td>4691.0</td>\n",
       "      <td>97612.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Oklahoma</th>\n",
       "      <td>199270.0</td>\n",
       "      <td>65705.0</td>\n",
       "      <td>45324.0</td>\n",
       "      <td>77969.0</td>\n",
       "      <td>5006.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Oregon</th>\n",
       "      <td>39178.0</td>\n",
       "      <td>26374.0</td>\n",
       "      <td>42332.0</td>\n",
       "      <td>38279.0</td>\n",
       "      <td>22695.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pennsylvania</th>\n",
       "      <td>148492.0</td>\n",
       "      <td>296428.0</td>\n",
       "      <td>265170.0</td>\n",
       "      <td>136028.0</td>\n",
       "      <td>252040.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rhode Island</th>\n",
       "      <td>58531.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>19527.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>South Carolina</th>\n",
       "      <td>194159.0</td>\n",
       "      <td>72355.0</td>\n",
       "      <td>192131.0</td>\n",
       "      <td>106191.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>South Dakota</th>\n",
       "      <td>NaN</td>\n",
       "      <td>37692.0</td>\n",
       "      <td>9638.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11888.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tennessee</th>\n",
       "      <td>238348.0</td>\n",
       "      <td>166294.0</td>\n",
       "      <td>239712.0</td>\n",
       "      <td>28837.0</td>\n",
       "      <td>44877.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Texas</th>\n",
       "      <td>19892.0</td>\n",
       "      <td>2317.0</td>\n",
       "      <td>7732.0</td>\n",
       "      <td>16214.0</td>\n",
       "      <td>1290.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Utah</th>\n",
       "      <td>3641.0</td>\n",
       "      <td>257630.0</td>\n",
       "      <td>55672.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>52012.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vermont</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4181.0</td>\n",
       "      <td>1083.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11227.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Virginia</th>\n",
       "      <td>72453.0</td>\n",
       "      <td>151999.0</td>\n",
       "      <td>33587.0</td>\n",
       "      <td>47869.0</td>\n",
       "      <td>228523.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Washington</th>\n",
       "      <td>27853.0</td>\n",
       "      <td>171739.0</td>\n",
       "      <td>123296.0</td>\n",
       "      <td>55231.0</td>\n",
       "      <td>1527.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>West Virginia</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1061.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Wisconsin</th>\n",
       "      <td>NaN</td>\n",
       "      <td>131927.0</td>\n",
       "      <td>60552.0</td>\n",
       "      <td>57156.0</td>\n",
       "      <td>251742.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Category Code          0         1         2         3         4\n",
       "State                                                           \n",
       "Delaware         14396.0   57038.0   22694.0       NaN       NaN\n",
       "Florida         359713.0  114211.0  557352.0  514388.0   35450.0\n",
       "Georgia         127692.0  119516.0  207149.0  171754.0   79353.0\n",
       "Hawaii               NaN    2621.0   19833.0       NaN       NaN\n",
       "Idaho            36174.0   43378.0   34976.0       NaN   50691.0\n",
       "Illinois        634782.0  215743.0  199563.0   15806.0  197890.0\n",
       "Indiana         123986.0   53491.0   81088.0       NaN   81506.0\n",
       "Iowa             24366.0  141559.0   42091.0       NaN   60363.0\n",
       "Kansas           15658.0   30905.0   94347.0   38157.0   68794.0\n",
       "Kentucky         63641.0   15813.0   64499.0   20444.0    9237.0\n",
       "Louisiana         4917.0       NaN       NaN    1813.0       NaN\n",
       "Maine             1640.0    9097.0   12920.0       NaN   29410.0\n",
       "Maryland         60253.0   91794.0    1533.0   31372.0   63890.0\n",
       "Massachusetts    93072.0  264386.0  253654.0   51117.0   15519.0\n",
       "Michigan         93598.0  105049.0  124374.0   77297.0   79517.0\n",
       "Minnesota        56322.0  229756.0   26881.0    3974.0  198124.0\n",
       "Mississippi          NaN    5315.0    2412.0   12605.0       NaN\n",
       "Missouri          8024.0   15977.0   12274.0       NaN    6587.0\n",
       "Montana           1951.0   17032.0   12343.0       NaN   43795.0\n",
       "Nebraska          9702.0   25147.0   62565.0    2672.0   23004.0\n",
       "Nevada          242317.0       NaN   38233.0       NaN       NaN\n",
       "New Hampshire        NaN       NaN       NaN       NaN    6642.0\n",
       "New Jersey      310709.0  238777.0  130344.0  109379.0  207687.0\n",
       "New Mexico       16506.0       NaN    5157.0   29343.0       NaN\n",
       "New York        403519.0  497668.0  663638.0  448749.0   39514.0\n",
       "North Carolina  310885.0  201291.0  173069.0  213543.0   26852.0\n",
       "North Dakota         NaN    4782.0       NaN       NaN   12477.0\n",
       "Ohio            149539.0  136415.0  174519.0    4691.0   97612.0\n",
       "Oklahoma        199270.0   65705.0   45324.0   77969.0    5006.0\n",
       "Oregon           39178.0   26374.0   42332.0   38279.0   22695.0\n",
       "Pennsylvania    148492.0  296428.0  265170.0  136028.0  252040.0\n",
       "Rhode Island     58531.0       NaN       NaN       NaN   19527.0\n",
       "South Carolina  194159.0   72355.0  192131.0  106191.0       NaN\n",
       "South Dakota         NaN   37692.0    9638.0       NaN   11888.0\n",
       "Tennessee       238348.0  166294.0  239712.0   28837.0   44877.0\n",
       "Texas            19892.0    2317.0    7732.0   16214.0    1290.0\n",
       "Utah              3641.0  257630.0   55672.0       NaN   52012.0\n",
       "Vermont              NaN    4181.0    1083.0       NaN   11227.0\n",
       "Virginia         72453.0  151999.0   33587.0   47869.0  228523.0\n",
       "Washington       27853.0  171739.0  123296.0   55231.0    1527.0\n",
       "West Virginia        NaN       NaN    1061.0       NaN       NaN\n",
       "Wisconsin            NaN  131927.0   60552.0   57156.0  251742.0"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#print our data frame \n",
    "heatmap_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Input how many states we want displayed. We originally did 50, but for visualization purposes we chose the 5 with the worst SVI\n",
    "num_states = 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(heatmap_data.head(num_states), xticklabels=svi_categories, cbar_kws={'label': 'Number of patients'})\n",
    "plt.xlabel('SVI Category')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Regressions for sex, age and ethnic group "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
